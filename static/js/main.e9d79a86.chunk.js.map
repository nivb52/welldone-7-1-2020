{"version":3,"sources":["cmps/Toolbar.jsx","services/CatsService.js","services/UtilServices.js","views/Categories.jsx","App.js","serviceWorker.js","index.js"],"names":["Toolbar","catId","back","view","edit","del","add","handleClick","type","id","className","onClick","getCat","a","async","categories","dbCat","map","c","push","delCat","index","findIndex","_id","console","log","splice","_returnDB","editOrAdd","newCat","idx","_editCat","newId","length","txt","possible","i","charAt","Math","floor","random","makeId","_addCat","name","Categories","useState","setCategories","selectCat","setSelectCat","editCat","setEditCat","viewCat","setViewCat","nameInput","setNameInput","loadCats","catService","cats","useEffect","_findCat","find","unSelect","foundCat","cat","key","placeholder","onChange","e","target","value","editedCat","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9d79a86.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Toolbar = ({ catId, back,view, edit, del, add }) => {\r\n  const handleClick = (type, id) => {\r\n    switch (type) {\r\n      case \"back\":\r\n        back();\r\n        break;\r\n      case \"view\":\r\n        view(id);\r\n        break;\r\n      case \"edit\":\r\n        edit(id);\r\n        break;\r\n      case \"del\":\r\n        del(id);\r\n        break;\r\n      case \"add\":\r\n      add();\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <h1>Categories</h1>\r\n\r\n      {!catId && (\r\n        <button onClick={() => handleClick(\"add\")} className=\"btn\">\r\n          new category\r\n        </button>\r\n      )}\r\n\r\n      {catId && (\r\n        <div className=\"toolbar-btn\">\r\n          <button\r\n            onClick={() => handleClick(\"back\")}\r\n            className=\"btn\"\r\n          >\r\n            back\r\n          </button>\r\n          <button\r\n            onClick={() => handleClick(\"view\", catId)}\r\n            className=\"btn btn-info\"\r\n          >\r\n            view\r\n          </button>\r\n          <button\r\n            onClick={() => handleClick(\"edit\", catId)}\r\n            className=\"btn btn-success\"\r\n          >\r\n            edit\r\n          </button>\r\n          <button\r\n            onClick={() => handleClick(\"del\", catId)}\r\n            className=\"btn btn-danger\"\r\n          >\r\n            delete\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import {makeId} from \"./UtilServices.js\";\r\n\r\nexport default {\r\n  getCat,\r\n  delCat,\r\n  editOrAdd\r\n};\r\n\r\nconst dbCat = [\r\n  { _id: \"0ewad0\", name: \"Travel\" },\r\n  { _id: \"1djaW1\", name: \"Snowboard\" },\r\n  { _id: \"2fAcp2\", name: \"Kitesurf\" },\r\n  { _id: \"3dl0P3\", name: \"Hiking\" },\r\n  { _id: \"4ljfq4\", name: \"Luxury\" },\r\n  { _id: \"5dape5\", name: \"Trending\" },\r\n  { _id: \"6gXpf6\", name: \"Most Popular\" }\r\n];\r\n\r\nasync function getCat() {\r\n  const categories = [];\r\n  dbCat.map(c => categories.push(c));\r\n  return categories;\r\n}\r\n\r\nasync function delCat(id) {\r\n  const index = dbCat.findIndex(c => c._id === id);\r\n  console.log(index);\r\n  \r\n  if (index === -1) return;\r\n  dbCat.splice(index, 1);\r\n  _returnDB();\r\n}\r\n\r\nfunction _editCat(newCat) {\r\n  const idx = dbCat.findIndex(c => c._id === newCat._id);\r\n  dbCat[idx] = newCat; // add to the Virtual DB as well:\r\n}\r\n\r\nfunction _addCat(newCat) {\r\n  const newId = makeId();\r\n  newCat._id = newId;\r\n  dbCat.push(newCat);\r\n}\r\n\r\nfunction editOrAdd(newCat) {\r\n  // return on empty\r\n  if (!newCat) return;\r\n\r\n  // toggle between edit and add\r\n  if (newCat._id) _editCat(newCat);\r\n  else _addCat(newCat);\r\n  _returnDB();\r\n}\r\n\r\nfunction _returnDB() {\r\n  // return new array with no connection to original db\r\n  let categories = [...dbCat];\r\n  return categories;\r\n}\r\n","\r\nexport function makeId(length = 7) {\r\n    let txt = ''\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return txt\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Toolbar from \"../cmps/Toolbar\";\r\nimport catService from \"../services/CatsService\";\r\n\r\nconst Categories = () => {\r\n  let isAjaxingForCats = false;\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectCat, setSelectCat] = useState();\r\n  const [editCat, setEditCat] = useState();\r\n  const [viewCat, setViewCat] = useState();\r\n  const [nameInput, setNameInput] = useState(editCat);\r\n\r\n  const loadCats = async () => {\r\n    isAjaxingForCats = true;\r\n    const cats = await catService.getCat();\r\n    setCategories(cats);\r\n    isAjaxingForCats = false;\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCats();\r\n  }, []);\r\n\r\n  const handleCatChoose = id => {\r\n    setSelectCat(id);\r\n  };\r\n\r\n  const _findCat = id => {\r\n    return categories.find(c => c._id === id);\r\n  };\r\n\r\n  const catEdit = id => {\r\n    const foundCat = _findCat(id);\r\n    setEditCat(foundCat);\r\n  };\r\n\r\n  const catAdd = newCat => {\r\n    setEditCat({});\r\n    console.log(\"catAdd\");\r\n  };\r\n\r\n  const catView = id => {\r\n    const foundCat = _findCat(id);\r\n    setViewCat(foundCat);\r\n  };\r\n\r\n  const handleInput = e => {\r\n    setNameInput(e.target.value);\r\n  };\r\n\r\n  const catDelete = async id => {\r\n    isAjaxingForCats = [true];\r\n    await catService.delCat(id);\r\n    loadCats();\r\n    unSelect();\r\n    isAjaxingForCats = [false];\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    const editedCat = { ...editCat, name: nameInput };\r\n    await catService.editOrAdd(editedCat);\r\n    setEditCat(null);\r\n    loadCats();\r\n  };\r\n  const isHighlited = (c) => {\r\n    return selectCat ? (c._id === selectCat ? \"highlight\" : \"\") : \"\"\r\n  }\r\n  const unSelect = () => {\r\n    setSelectCat();\r\n    setEditCat();\r\n    setViewCat();\r\n  };\r\n\r\n  return (\r\n    <div className=\"categories\">\r\n      <Toolbar\r\n        catId={selectCat}\r\n        edit={catEdit}\r\n        view={catView}\r\n        add={catAdd}\r\n        del={catDelete}\r\n        back={unSelect}\r\n      />\r\n      {categories[0] &&\r\n        !editCat &&\r\n        !viewCat &&\r\n        categories.map(cat => (\r\n          <div\r\n            className={ \"category \" + isHighlited(cat) }\r\n            key={cat._id}\r\n            onClick={() => handleCatChoose(cat._id)}  \r\n          >\r\n            <div className=\"category-name\">\r\n              <span>\r\n                {cat.name}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n\r\n      {viewCat && (\r\n        <div className=\"view-categories\">\r\n          <span>{viewCat.name}</span>\r\n        </div>\r\n      )}\r\n\r\n      {editCat && (\r\n        <div className=\"edit-categories\">\r\n          <input placeholder={editCat.name} onChange={handleInput} />\r\n          <button  className=\"btn\" onClick={handleSave}>save</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import React from \"react\";\nimport Categories from \"./views/Categories\";\nimport \"./style/App.css\";\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Categories />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}